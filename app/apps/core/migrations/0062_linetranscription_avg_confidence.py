# Generated by Django 2.2.27 on 2022-04-06 17:28

from statistics import mean

from django.db import migrations, models
from django.db.models.functions import Coalesce


def populate_avg_confidence(apps, schema_editor):
    # Computes average character confidence for all existing OCR lines with confidence values.
    # This will be done automatically for each new transcription performed--this function is just
    # to populate existing records.

    # First, compute average confidence per line. Save this in a DB field to allow fast retrieval
    # by page-level view.
    LineTranscription = apps.get_model("core", "LineTranscription")
    line_transcriptions = LineTranscription.objects.filter(
        graphs__0__confidence__isnull=False
    )

    for lt in line_transcriptions:
        lt.avg_confidence = mean([graph["confidence"] for graph in lt.graphs])

    LineTranscription.objects.bulk_update(line_transcriptions, ["avg_confidence"])

    # Now, compute average line confidence for all existing Transcriptions. This will be used for
    # summary views (project level).
    Transcription = apps.get_model("core", "Transcription")
    transcriptions = Transcription.objects.filter(
        linetranscription__avg_confidence__isnull=False
    ).distinct()
    for t in transcriptions:
        lines = t.linetranscription_set.all()
        t.avg_confidence = lines.aggregate(avg=models.Avg("avg_confidence")).get("avg")

    Transcription.objects.bulk_update(transcriptions, ["avg_confidence"])

    # Finally, compute average line confidence for DocumentParts. This will be used for
    # summary views (document level).
    DocumentPart = apps.get_model("core", "DocumentPart")
    parts = DocumentPart.objects.all()

    # DocumentParts may be linked to more than one transcription (i.e. multiple OCR models), so
    # here we determine the greatest average as opposed to just the average. This should be
    # sufficient for overview/summary purposes.
    for part in parts:
        avg_qs = LineTranscription.objects.filter(
            line__document_part=part
        ).values(
            "transcription",  # Since DocumentPart does not keep track of individual transcriptions,
                              # and is only linked to lines, we have to group lines by transcription.
        ).annotate(
            avg=Coalesce(models.Avg("avg_confidence"), -1),  # Average "avg_confidence" for this set of lines
        ).order_by("-avg")
        if avg_qs.count():
            max_avg = avg_qs[0]
            part.max_avg_confidence = max_avg["avg"]
            part.best_transcription = Transcription.objects.get(pk=max_avg["transcription"])

    DocumentPart.objects.bulk_update(parts, ["max_avg_confidence", "best_transcription"])


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0061_auto_20220419_1414"),
    ]

    operations = [
        migrations.AddField(
            model_name="linetranscription",
            name="avg_confidence",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="transcription",
            name="avg_confidence",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="documentpart",
            name="max_avg_confidence",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="documentpart",
            name="best_transcription",
            field=models.ForeignKey(blank=True, null=True, on_delete=models.deletion.SET_NULL, to="core.Transcription"),
        ),
        migrations.RunPython(populate_avg_confidence, migrations.RunPython.noop),
    ]
